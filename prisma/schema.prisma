// This is your Prisma schema file

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
    FACULTY // Can manage their own courses and files
    CHAIRPERSON // Can manage faculty and approve materials
    ADMIN // System administration and user management
    SUPER_ADMIN // System-wide access and admin management
}

enum Semester {
    FALL
    SPRING
    SUMMER
}

enum FileStatus {
    PENDING
    IN_REVIEW
    APPROVED
    REJECTED
}

enum UserStatus {
    ACTIVE
    INACTIVE
    ARCHIVED
}

// Types
type FileData {
    url        String
    version    Int
    updatedAt  DateTime
    hash       String?
    approvedAt DateTime?
    comments   String?
}

// User model: Authentication and authorization
model User {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    email      String     @unique
    name       String
    password   String
    role       UserRole
    department String
    status     UserStatus @default(ACTIVE)

    // Soft delete fields
    deletedAt     DateTime?
    deletedBy     String?   @db.ObjectId
    deletedReason String?

    // Archive fields
    archivedAt     DateTime?
    archivedBy     String?   @db.ObjectId
    archivedReason String?

    // OAuth fields
    isOAuthUser Boolean @default(false)
    googleId    String?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    accounts      Account[]
    sessions      Session[]
    courseFiles   CourseFiles[]
    notifications Notification[]
    auditLogs     AuditLog[]
    refreshTokens RefreshToken[]
    UserActivity  UserActivity[]
    Department    Department?    @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    departmentId  String?        @db.ObjectId

    // Archive relation
    archivedByUser User?  @relation("ArchivedUsers", fields: [archivedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    archivedUsers  User[] @relation("ArchivedUsers")

    // Delete relation
    deletedByUser User?           @relation("DeletedUsers", fields: [deletedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    deletedUsers  User[]          @relation("DeletedUsers")
    PasswordReset PasswordReset[]
    FileTemplate  FileTemplate[]
    TemplateUsage TemplateUsage[]

    @@index([role, status])
    @@index([deletedAt])
}

// Faculty Members model
model FacultyMember {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    shortName   String   @unique
    name        String
    email       String   @unique
    designation String
    department  String // Store department as string
    isActive    Boolean  @default(true)
    courses     Course[]

    // Timestamps
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    Department   Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    departmentId String?     @db.ObjectId
}

// Course model
model Course {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    code      String
    name      String
    section   Int
    semester  Semester
    year      Int
    faculty   FacultyMember? @relation(fields: [facultyId], references: [id])
    facultyId String?        @db.ObjectId
    isActive  Boolean        @default(true)

    // Relations
    courseFiles CourseFiles[]

    // Timestamps
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    TemplateUsage TemplateUsage[]

    // Ensure unique course section per semester
    @@unique([code, section, semester, year])
    @@index([facultyId])
    @@index([isActive])
}

// Course Files model
model CourseFiles {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    courseId String     @db.ObjectId
    userId   String     @db.ObjectId
    semester Semester?
    year     Int?
    status   FileStatus @default(PENDING)
    comments String?

    // Optional Fixed Files
    attendanceSheet FileData?
    finalGrades     FileData?
    summaryObe      FileData?
    insFeedback     FileData?
    courseOutline   FileData?
    assignment      FileData?
    labExperiment   FileData?

    // Optional Exam Files
    MidExam   MidExam[]
    QuizExam  QuizExam[]
    FinalExam FinalExam?

    // Optional Dynamic Files
    customFiles Json?
    miscFiles   Json?

    // Relations
    user          User           @relation(fields: [userId], references: [id])
    course        Course         @relation(fields: [courseId], references: [id])
    notifications Notification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([courseId, userId])
    @@index([courseId])
    @@index([userId])
}

// Exam models
model MidExam {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    examNumber Int // 1 or 2

    // File data
    question FileData?
    highest  FileData?
    average  FileData?
    marginal FileData?

    // Status
    isCompleted Boolean @default(false)

    // Relation
    courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
    courseFilesId String      @db.ObjectId

    @@unique([courseFilesId, examNumber])
}

model QuizExam {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    quizNumber Int

    // File data
    question FileData?
    highest  FileData?
    average  FileData?
    marginal FileData?

    // Status
    isCompleted Boolean @default(false)

    // Relation
    courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
    courseFilesId String      @db.ObjectId

    @@unique([courseFilesId, quizNumber])
}

model FinalExam {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // File data
    question FileData?
    highest  FileData?
    average  FileData?
    marginal FileData?

    // Status
    isCompleted Boolean @default(false)

    // Relation
    courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
    courseFilesId String      @db.ObjectId

    @@unique([courseFilesId])
}

// Authentication models
model Account {
    id                String @id @default(auto()) @map("_id") @db.ObjectId
    userId            String @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    user              User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model RefreshToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    issuedAt  DateTime @default(now())
    expiresAt DateTime
    isRevoked Boolean  @default(false)

    @@index([userId])
}

// Notification model
model Notification {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    message String
    type    String
    isRead  Boolean @default(false)

    // Relations
    user          User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId        String      @db.ObjectId
    courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    courseFilesId String      @db.ObjectId

    createdAt DateTime @default(now())

    @@index([userId, isRead])
}

// Audit logging
model AuditLog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    action    String
    details   Json
    createdAt DateTime @default(now())

    @@index([userId, action])
}

// Add this model to your schema
model PasswordReset {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    expiresAt DateTime
    isUsed    Boolean  @default(false)
    createdAt DateTime @default(now())

    @@index([userId])
}

// Add department management
model Department {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    code     String  @unique // e.g., "CSE"
    name     String // e.g., "Computer Science & Engineering"
    isActive Boolean @default(true)

    // Relations
    users   User[]
    faculty FacultyMember[]

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Add UserActivity model
model UserActivity {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    action    String
    details   Json
    ipAddress String?
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([userId, action])
    @@index([createdAt])
}

// Add new model
model FileTemplate {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    isRequired  Boolean         @default(false)
    fileTypes   String[] // ["pdf", "doc", "docx"]
    maxSize     Int             @default(10485760) // Default 10MB
    department  String
    status      Boolean         @default(true)
    createdBy   String          @db.ObjectId
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    usages      TemplateUsage[]

    user User @relation(fields: [createdBy], references: [id])

    @@index([department])
    @@index([status])
}

// Add template usage tracking
model TemplateUsage {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    templateId String   @db.ObjectId
    courseId   String   @db.ObjectId
    userId     String   @db.ObjectId
    fileId     String   @db.ObjectId
    usedAt     DateTime @default(now())

    template FileTemplate @relation(fields: [templateId], references: [id])
    course   Course       @relation(fields: [courseId], references: [id])
    user     User         @relation(fields: [userId], references: [id])

    @@index([templateId])
    @@index([courseId])
    @@index([userId])
}
